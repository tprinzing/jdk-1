/*
 * Copyright (c) 2023, Oracle and/or its affiliates. All rights reserved.
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
 *
 * This code is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License version 2 only, as
 * published by the Free Software Foundation.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the LICENSE file that accompanied this code.
 *
 * This code is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
 * version 2 for more details (a copy is included in the LICENSE file that
 * accompanied this code).
 *
 * You should have received a copy of the GNU General Public License version
 * 2 along with this work; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.
 *
 * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA
 * or visit www.oracle.com if you need additional information or have any
 * questions.
 */

package jdk.internal.event;


import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.net.UnixDomainSocketAddress;

public class SocketReadEvent extends Event {

    //@Label("Remote Host")
    public String host;

    //@Label("Remote Address")
    public String address;

    //@Label("Remote Port")
    public int port;

    //@Label("Timeout Value")
    //@Timespan(Timespan.MILLISECONDS)
    public long timeout;

    //@Label("Bytes Read")
    //@Description("Number of bytes read from the socket")
    //@DataAmount
    public long bytesRead;

    //@Label("End of Stream")
    //@Description("If end of stream was reached")
    public boolean endOfStream;

    /**
     * Actually commit a socket read event.  This is generated automatically.
     * The order of the fields must be the same as the parameters in in this method.
     * {@code commit(..., String, String, int, long, long, boolean)}
     *
     * @param start
     * @param duration
     * @param host
     * @param address
     * @param port
     * @param timeout
     * @param byteRead
     * @param endOfStream
     */
    public static void commit(long start, long duration, String host, String address, int port, long timeout, long byteRead, boolean endOfStream) {
        // Generated by JFR
    }

    public static boolean shouldCommit(long duration) {
        // Generated by JFR
        return false;
    }

    public static boolean enabled() {
        // Generated by JFR
        return false;
    }

    public static long timestamp() {
        // Generated by JFR
        return 0L;
    }

    /**
     * Execute the standard boilerplate that proceeds a potential call to the machine generated
     * commit method.
     *
     * @param start  the start time
     * @param nbytes  how many bytes were transferred
     * @param remote  the address of the remote socket being written to
     */
    public static void checkForCommit(long start, long nbytes, SocketAddress remote, long timeout, Throwable thrown) {
        long duration = timestamp() - start;
        if (shouldCommit(duration)) {
            boolean eof = nbytes < 0 ? true : false;
            nbytes = nbytes < 0 ? 0 : nbytes;
            if (remote instanceof InetSocketAddress isa) {
                InetAddress a = isa.getAddress();
                commit(start, duration, a.getHostName(), a.getHostAddress(), isa.getPort(), timeout, nbytes, eof);
            } else if (remote instanceof UnixDomainSocketAddress) {
                UnixDomainSocketAddress udsa = (UnixDomainSocketAddress) remote;
                String path = "[" + udsa.getPath().toString() + "]";
                commit(start, duration, "Unix domain socket", path, 0, timeout, nbytes, eof);
            }
        }
    }

}
